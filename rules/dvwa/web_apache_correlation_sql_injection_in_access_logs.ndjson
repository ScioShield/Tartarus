{"actions": [], "author": ["Dylan Shield (Shieldia.co)"], "description": "Detects potential SQL injection attempts via GET requests in access logs.\n", "enabled": true, "exceptions_list": [], "false_positives": ["Java scripts and CSS Files", "User searches in search boxes of the respective website", "Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes"], "from": "now-9m", "id": "ac762709-a61b-4528-b7b5-725dd1406fa3", "immutable": false, "index": ["logs-apache.access-default"], "interval": "5m", "language": "esql", "license": "DRL 1.1", "max_signals": 100, "meta": {"from": "1m"}, "name": "SIGMA - SQL Injection Strings In URI", "note": "", "output_index": "", "query": "from logs-apache.access-default metadata _id, _index, _version | where http.request.method==\"GET\" and (url.query like \"*@@version*\" or url.query like \"*@@VERSION*\" or url.query like \"*%271%27%3D%271*\" or url.query like \"*=select *\" or url.query like \"*=select(*\" or url.query like \"*=select%20*\" or url.query like \"*concat_ws(*\" or url.query like \"*CONCAT(0x*\" or url.query like \"*from mysql.innodb_table_stats*\" or url.query like \"*from%20mysql.innodb_table_stats*\" or url.query like \"*group_concat(*\" or url.query like \"*information_schema.tables*\" or url.query like \"*json_arrayagg(*\" or url.query like \"*or 1=1#*\" or url.query like \"*or%201=1#*\" or url.query like \"*order by *\" or url.query like \"*order%20by%20*\" or url.query like \"*select * *\" or url.query like \"*select database()*\" or url.query like \"*select version()*\" or url.query like \"*select%20*%20*\" or url.query like \"*select%20database()*\" or url.query like \"*select%20version()*\" or url.query like \"*select%28sleep%2810%29*\" or url.query like \"*SELECTCHAR(*\" or url.query like \"*table_schema*\" or url.query like \"*UNION ALL SELECT*\" or url.query like \"*UNION SELECT*\" or url.query like \"*UNION%20ALL%20SELECT*\" or url.query like \"*UNION%20SELECT*\" or url.query like \"*\u00271\u0027=\u00271*\" or url.query like \"*+or+0%3D0+%23*\" or url.query like \"*+or+%277659%27%3D%277659*\" or url.query like \"*+or+1%3D1+or+%27%27%3D%27*\" or url.query like \"*+or+%271%27%3D%271*\" or url.query like \"*or+0%3D0+%23%22*\" or url.query like \"*+or+1+--%27*\" or url.query like \"*+or+%27%27%3D%27*\" or url.query like \"*+or+%27a%27%3D%27a*\" or url.query like \"*%7C%7C%276*\" or url.query like \"*or+0%3D0+%23*\" or url.query like \"*+or+0%3D0+%23%22*\") and not http.response.status_code==404\n| eval timebucket=date_trunc(5minutes, @timestamp) | stats value_count=count_distinct(url.query) by timebucket, source.ip, host.name\n| where value_count \u003e= 1", "references": ["https://www.acunetix.com/blog/articles/exploiting-sql-injection-example/", "https://www.acunetix.com/blog/articles/using-logs-to-investigate-a-web-application-attack/", "https://brightsec.com/blog/sql-injection-payloads/", "https://github.com/payloadbox/sql-injection-payload-list", "https://book.hacktricks.xyz/pentesting-web/sql-injection/mysql-injection"], "related_integrations": [], "required_fields": [], "risk_score": 75, "risk_score_mapping": [], "rule_id": "ac762709-a61b-4528-b7b5-725dd1406fa3", "setup": "", "severity": "high", "severity_mapping": [], "tags": [], "threat": [{"framework": "MITRE ATT\u0026CK", "tactic": {"id": "TA0001", "name": "Initial-Access", "reference": "https://attack.mitre.org/tactics/TA0001"}, "technique": [{"id": "T1190", "name": "Exploit Public-Facing Application", "reference": "https://attack.mitre.org/techniques/T1190", "subtechnique": []}]}], "to": "now", "type": "esql", "version": 1}